generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminLogin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(User)
  image     String
  createdAt DateTime @default(now())
}

model User {
  id            String       @id @default(uuid())
  name          String?
  date_of_birth String?
  gender        String?
  password      String?
  email         String?      @unique
  image         String       @default("https://res.cloudinary.com/dyvisacbu/image/upload/v1664698266/Hotel%20User%20Image/1664698260709-account_ttr2cd.png")
  phone_number  Int?         @unique
  role          Role?        @default(User)
  userreviewId  String?
  createdAt     DateTime     @default(now())
  Booked        Bookings[]
  favorite      Favorite[]   @relation("favorited")
  reviews       Reviews[]
  user          Favorite?    @relation("User", fields: [userreviewId], references: [id])
  permissions   Permission[]
}

model Rooms {
  id               String     @id @default(uuid())
  name             String
  price            Int
  bedtype          String[]
  number_of_guests Int
  bedrooms         Int
  beds             Int
  bathrooms        Int
  amenities        String[]
  description      String
  rating           Decimal?   @db.Decimal(2, 1)
  createdAt        DateTime   @default(now())
  room_type        Bookings[]
  roomFavorite     Favorite[]
  image_url        Images[]
  reviews          Reviews[]
}

model Images {
  id            String   @id @default(uuid())
  name          String
  url           Json
  public_id     String[]
  roomImageById String?
  roomImage     Rooms?   @relation(fields: [roomImageById], references: [id])
}

model Bookings {
  id                String   @id @default(uuid())
  userById          String
  createdAt         DateTime @default(now())
  check_in          String
  check_out         String
  roomsById         String?
  toRate            String?  @default("rate")
  paid              Int
  number_of_nights  Int
  payment_intent_id String
  number_of_guest   Int
  status            Status   @default(Pending)
  roomBy            Rooms?   @relation(fields: [roomsById], references: [id])
  userBy            User     @relation(fields: [userById], references: [id])
}

model Rides {
  id          String   @id @default(uuid())
  name        String
  image_url   Json
  public_id   String[]
  price       Int
  description String
  createdAt   DateTime @default(now())
}

model Venues {
  id          String   @id @default(uuid())
  name        String
  image_url   Json
  public_id   String[]
  services    String[]
  description String
  createdAt   DateTime @default(now())
}

model Reviews {
  id        String   @id @default(uuid())
  userId    String
  comment   String?
  roomById  String
  Rate      Int
  createdAt DateTime @default(now())
  roomBy    Rooms    @relation(fields: [roomById], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id            String @id @default(uuid())
  favoriteId    String
  roomProductId String
  favorite      User   @relation("favorited", fields: [favoriteId], references: [id])
  roomProduct   Rooms  @relation(fields: [roomProductId], references: [id])
  user          User[] @relation("User")
}

enum Role {
  User
  Admin
  SuperAdmin
}

enum Status {
  Pending
  Booked
  Cancelled
  Check_In
  Check_Out
  Completed
}

enum Permission {
  ADMIN
  USER
  DEVELOPER
}
